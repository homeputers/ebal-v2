---
import config from 'virtual:starlight/user-config';

const base = (import.meta.env.BASE_URL ?? '/').replace(/\/$/, '');

const locales = Object.entries(config.locales ?? {}).map(([slug, details]) => {
  const lang = details?.lang ?? slug;
  const path = slug === 'root' ? base || '/' : `${base}/${slug}/`;
  return {
    slug,
    slugKey: slug.toLowerCase(),
    lang,
    langKey: lang.toLowerCase(),
    path
  };
});

const defaultLocaleValue =
  typeof config.defaultLocale === 'string'
    ? config.defaultLocale
    : config.defaultLocale?.locale ?? locales[0]?.slug ?? 'en';

const defaultLocaleKey = defaultLocaleValue.toLowerCase();

const defaultLocaleEntry =
  locales.find(
    ({ slug, slugKey, langKey }) =>
      slug === defaultLocaleValue || slugKey === defaultLocaleKey || langKey === defaultLocaleKey
  ) ?? locales[0];

const fallbackPath = defaultLocaleEntry?.path ?? `${base || ''}/`;

const defaultHtmlLang = defaultLocaleEntry?.lang ?? 'en';

const localePaths = Object.fromEntries(
  locales.flatMap(({ slugKey, langKey, path }) => {
    const entries = [[slugKey, path]];
    if (langKey && langKey !== slugKey) {
      entries.push([langKey, path]);
    }
    return entries;
  })
);

const redirectScript = `
      const localePaths = ${JSON.stringify(localePaths)};
      const fallback = ${JSON.stringify(fallbackPath)};

      function resolveLocale() {
        if (typeof navigator === 'undefined') {
          return null;
        }
        const candidates = [];
        if (Array.isArray(navigator.languages) && navigator.languages.length) {
          candidates.push(...navigator.languages);
        }
        if (navigator.language) {
          candidates.push(navigator.language);
        }
        for (const candidate of candidates) {
          if (typeof candidate !== 'string') continue;
          const normalized = candidate.toLowerCase();
          if (localePaths[normalized]) {
            return normalized;
          }
          const primary = normalized.split('-')[0];
          if (primary && localePaths[primary]) {
            return primary;
          }
        }
        return null;
      }

      const locale = resolveLocale();
      const target = (locale && localePaths[locale]) || fallback;

      if (target && typeof window !== 'undefined') {
        const current = window.location.pathname + window.location.search;
        if (current !== target) {
          window.location.replace(target);
        }
      }
    `;
---
<!DOCTYPE html>
<html lang={defaultHtmlLang}>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="refresh" content={`0; url=${fallbackPath}`} />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Redirecting…</title>
    <script type="module" set:html={redirectScript}></script>
    <style>
      body {
        display: grid;
        place-content: center;
        min-height: 100vh;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        margin: 0;
        color: #0f172a;
      }
    </style>
  </head>
  <body>
    <p>Redirecting…</p>
  </body>
</html>
