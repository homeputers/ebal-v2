openapi: 3.0.1
info:
  title: ebal API
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /health:
    get:
      tags:
        - Health
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /storage/health:
    get:
      tags:
        - Storage
      summary: Check storage module readiness
      description: Returns the current status of the storage subsystem when enabled.
      operationId: storageHealth
      responses:
        '200':
          description: Storage module is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageHealth'
  /meta/git:
    get:
      tags:
        - Meta
      summary: Retrieve git build metadata
      description: Provides information about the git revision used to build the service for debugging and triage.
      operationId: getGitInformation
      responses:
        '200':
          description: Git metadata for the running service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitInfo'
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate with email and password
      description: Issues a new access and refresh token pair for valid credentials.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Authenticated session tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenPair'
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh an access token
      description: Exchanges a valid refresh token for a new access token pair.
      operationId: refreshAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Refreshed session tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenPair'
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request a password reset email
      description: Sends a password reset link to the provided email when a matching account exists.
      operationId: requestPasswordReset
      parameters:
        - name: Accept-Language
          in: header
          description: Preferred language for the password reset email content.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '204':
          description: Reset instructions sent when applicable
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset a password using a token
      description: Completes the password reset workflow using a previously issued token.
      operationId: completePasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '204':
          description: Password reset completed
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change the authenticated user's password
      description: Allows an authenticated user to change their password using the current password for verification.
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password updated successfully
  /auth/me:
    get:
      tags:
        - Auth
      summary: Retrieve the current authenticated user
      description: Returns information about the authenticated principal for the current request.
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /me:
    get:
      tags:
        - Profile
      summary: Retrieve the signed-in user's profile
      description: Returns profile details for the currently authenticated user.
      operationId: getMyProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    patch:
      tags:
        - Profile
      summary: Update the signed-in user's profile
      description: Updates the display name or avatar preferences for the authenticated user.
      operationId: updateMyProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMyProfileRequest'
      responses:
        '200':
          description: Updated profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyProfile'
        '400':
          description: Invalid profile update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /me/avatar:
    post:
      tags:
        - Profile
      summary: Upload a new avatar for the signed-in user
      description: Accepts a square image up to 2MB in PNG, JPEG, or WebP format. The server may crop or resize the image.
      operationId: uploadMyAvatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: Avatar image file (PNG, JPEG, or WebP, up to 2MB).
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAvatarResponse'
        '400':
          description: Invalid avatar upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    delete:
      tags:
        - Profile
      summary: Remove the signed-in user's avatar
      description: Deletes the current avatar image for the authenticated user.
      operationId: deleteMyAvatar
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Avatar removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /me/change-password:
    post:
      tags:
        - Profile
      summary: Change the signed-in user's password
      description: Alias of the change password flow requiring the current password.
      operationId: changeMyPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password updated successfully
        '400':
          description: Invalid password change request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /me/change-email:
    post:
      tags:
        - Profile
      summary: Request an email change for the signed-in user
      description: Sends a confirmation link to the new email address after validating the current password.
      operationId: requestMyEmailChange
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeMyEmailRequest'
      responses:
        '204':
          description: Email change initiated
        '400':
          description: Invalid email change request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /me/confirm-email:
    post:
      tags:
        - Profile
      summary: Confirm a pending email change using the emailed token
      description: Consumes the confirmation token, applies the new email, and revokes existing refresh tokens.
      operationId: confirmMyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmMyEmailRequest'
      responses:
        '204':
          description: Email change confirmed
        '400':
          description: Invalid confirmation token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /admin/users:
    get:
      tags:
        - Admin Users
      summary: List users
      description: Returns a paginated list of users filtered by query, role, or activation state.
      operationId: listUsers
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Free-text search across email and display name.
        - name: role
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Role'
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Users page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserResponse'
    post:
      tags:
        - Admin Users
      summary: Create a new user
      description: Creates a user and optionally sends a temporary password notification.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Admin Users
      summary: Retrieve a user
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - Admin Users
      summary: Update a user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Admin Users
      summary: Deactivate or remove a user
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content
  /admin/users/{id}/reset-password:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Admin Users
      summary: Send a password reset notification
      description: Triggers a password reset email for the specified user.
      operationId: resetUserPassword
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content
  /search:
    get:
      tags: [Search]
      security:
        - bearerAuth: []
      operationId: search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResult'
  /groups:
    get:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: listGroups
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Groups page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageGroupResponse'
    post:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
  /groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: getGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
    put:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
    delete:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: deleteGroup
      responses:
        '204':
          description: No Content
  /groups/{id}/members/{memberId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: memberId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: addGroupMember
      responses:
        '204':
          description: No Content
    delete:
      tags: [Groups]
      security:
        - bearerAuth: []
      operationId: removeGroupMember
      responses:
        '204':
          description: No Content
  /members:
    get:
      tags: [Members]
      security:
        - bearerAuth: []
      operationId: listMembers
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Members page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMemberResponse'
    post:
      tags: [Members]
      security:
        - bearerAuth: []
      operationId: createMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
  /members/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Members]
      security:
        - bearerAuth: []
      operationId: getMember
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
    put:
      tags: [Members]
      security:
        - bearerAuth: []
      operationId: updateMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
    delete:
      tags: [Members]
      security:
        - bearerAuth: []
      operationId: deleteMember
      responses:
        '204':
          description: No Content
  /services:
    get:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: listServices
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Services page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageServiceResponse'
    post:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: createService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
  /services/ical:
    get:
      tags: [Services]
      summary: Export upcoming services as iCal
      operationId: exportServicesCalendar
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: iCalendar feed for upcoming services
          content:
            text/calendar:
              schema:
                type: string
        '404':
          description: Calendar token not found
  /services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: getService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
    put:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: updateService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
    delete:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: deleteService
      responses:
        '204':
          description: No Content
  /services/{id}/plan-items:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: listServicePlanItems
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePlanItemResponse'
    post:
      tags: [Services]
      security:
        - bearerAuth: []
      operationId: addServicePlanItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePlanItemRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePlanItemResponse'
  /service-plan-items/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags: [Service Plan Items]
      security:
        - bearerAuth: []
      operationId: updateServicePlanItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePlanItemRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePlanItemResponse'
    delete:
      tags: [Service Plan Items]
      security:
        - bearerAuth: []
      operationId: deleteServicePlanItem
      responses:
        '204':
          description: No Content
  /songs:
    get:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: listSongs
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Songs page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSongResponse'
    post:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: createSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongResponse'
  /songs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: getSong
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongResponse'
    put:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: updateSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongResponse'
    delete:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: deleteSong
      responses:
        '204':
          description: No Content
  /songs/{id}/arrangements:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: listArrangements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArrangementResponse'
    post:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: addArrangement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrangementRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementResponse'
  /songs/arrangements/{arrangementId}:
    parameters:
      - name: arrangementId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: getArrangement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementResponse'
    put:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: updateArrangement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrangementRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementResponse'
    delete:
      tags: [Songs]
      security:
        - bearerAuth: []
      operationId: deleteArrangement
      responses:
        '204':
          description: No Content
  /song-sets:
    get:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: listSongSets
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Song sets page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSongSetResponse'
    post:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: createSongSet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongSetRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongSetResponse'
  /song-sets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: getSongSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongSetResponse'
    put:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: updateSongSet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongSetRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongSetResponse'
    delete:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: deleteSongSet
      responses:
        '204':
          description: No Content
  /song-sets/{id}/items:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: listSongSetItems
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongSetItemResponse'
    post:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: addSongSetItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongSetItemRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongSetItemResponse'
  /song-sets/{id}/items/{itemId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: removeSongSetItem
      responses:
        '204':
          description: No Content
  /song-sets/{id}/items/reorder:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags: [Song Sets]
      security:
        - bearerAuth: []
      operationId: reorderSongSetItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '204':
          description: No Content
  /song-set-items/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags: [Song Set Items]
      security:
        - bearerAuth: []
      operationId: updateSongSetItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongSetItemRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongSetItemResponse'
    delete:
      tags: [Song Set Items]
      security:
        - bearerAuth: []
      operationId: deleteSongSetItem
      responses:
        '204':
          description: No Content
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Health:
      type: object
      properties:
        status:
          type: string
    GitInfo:
      type: object
      properties:
        branch:
          type: string
          description: Current branch used for the build.
        commitId:
          type: string
          description: Full git commit SHA for the build.
        abbreviatedCommitId:
          type: string
          description: Abbreviated git commit SHA.
        commitTime:
          type: string
          format: date-time
          description: Commit timestamp in ISO-8601 format.
        dirty:
          type: boolean
          description: Indicates if the working tree had uncommitted changes when built.
        tags:
          type: array
          description: Tags that point to the current commit.
          items:
            type: string
        closestTag:
          type: string
          description: Closest annotated tag in the commit history.
        describe:
          type: string
          description: Output of `git describe --always --dirty` if available.
    StorageHealth:
      type: object
      required: [status]
      properties:
        status:
          type: string
          description: High level status string for the storage module.
      example:
        status: enabled
    ProblemDetail:
      type: object
      description: RFC 7807 problem details with optional application-specific fields.
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri
        errors:
          type: object
          additionalProperties:
            type: string
        code:
          type: string
    Role:
      type: string
      description: Role assigned to a user determining access level.
      enum: [ADMIN, PLANNER, MUSICIAN, VIEWER]
    User:
      type: object
      required: [id, email, displayName, roles, isActive, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        displayName:
          type: string
        avatarUrl:
          type: string
          format: uri
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MyProfile:
      type: object
      required: [id, email, displayName, roles, isActive, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        displayName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        isActive:
          type: boolean
        avatarUrl:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PageUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
        size:
          type: integer
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    AuthTokenPair:
      type: object
      required: [accessToken, refreshToken, expiresIn]
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Access token expiration in seconds.
    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    UpdateMyProfileRequest:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 120
        avatarAction:
          type: string
          description: Action to take for the current avatar image.
          enum: [KEEP, REMOVE]
          default: KEEP
    ChangeMyEmailRequest:
      type: object
      required: [currentPassword, newEmail]
      properties:
        currentPassword:
          type: string
        newEmail:
          type: string
          format: email
    ConfirmMyEmailRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string
    UploadAvatarResponse:
      type: object
      required: [avatarUrl]
      properties:
        avatarUrl:
          type: string
          format: uri
    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      required: [token, newPassword]
      properties:
        token:
          type: string
        newPassword:
          type: string
    CreateUserRequest:
      type: object
      required: [email, displayName, roles]
      properties:
        email:
          type: string
          format: email
        displayName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        temporaryPassword:
          type: string
        isActive:
          type: boolean
    UpdateUserRequest:
      type: object
      properties:
        displayName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        isActive:
          type: boolean
    GroupRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
    GroupResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        memberIds:
          type: array
          items:
            type: string
            format: uuid
    PageGroupResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/GroupResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
        size:
          type: integer
    SearchResult:
      type: object
      required: [kind, id, title]
      properties:
        kind:
          type: string
          enum: [member, song, service]
        id:
          type: string
          format: uuid
        title:
          type: string
        subtitle:
          type: string
    MemberRequest:
      type: object
      required: [displayName]
      properties:
        displayName:
          type: string
        instruments:
          type: array
          items:
            type: string
    MemberResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayName:
          type: string
        instruments:
          type: array
          items:
            type: string
    PageMemberResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/MemberResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
        size:
          type: integer
    ServiceRequest:
      type: object
      required: [startsAt]
      properties:
        startsAt:
          type: string
          format: date-time
        location:
          type: string
    ServiceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        startsAt:
          type: string
          format: date-time
        location:
          type: string
    PageServiceResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ServiceResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
        size:
          type: integer
    ServicePlanItemRequest:
      type: object
      properties:
        type:
          type: string
        refId:
          type: string
          format: uuid
        sortOrder:
          type: integer
        notes:
          type: string
    ServicePlanItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serviceId:
          type: string
          format: uuid
        type:
          type: string
        refId:
          type: string
          format: uuid
        sortOrder:
          type: integer
        notes:
          type: string
    SongRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
        ccli:
          type: string
        author:
          type: string
        defaultKey:
          type: string
        tags:
          type: array
          items:
            type: string
    SongResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        ccli:
          type: string
        author:
          type: string
        defaultKey:
          type: string
        tags:
          type: array
          items:
            type: string
    PageSongResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SongResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
        size:
          type: integer
    ArrangementRequest:
      type: object
      properties:
        key:
          type: string
        bpm:
          type: integer
        meter:
          type: string
        lyricsChordpro:
          type: string
    ArrangementResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        songId:
          type: string
          format: uuid
        key:
          type: string
        bpm:
          type: integer
        meter:
          type: string
        lyricsChordpro:
          type: string
    SongSetRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
    SongSetResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PageSongSetResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SongSetResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
        size:
          type: integer
    SongSetItemRequest:
      type: object
      properties:
        arrangementId:
          type: string
          format: uuid
        sortOrder:
          type: integer
        transpose:
          type: integer
        capo:
          type: integer
    SongSetItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        songSetId:
          type: string
          format: uuid
        arrangementId:
          type: string
          format: uuid
        sortOrder:
          type: integer
        transpose:
          type: integer
        capo:
          type: integer
